*&---------------------------------------------------------------------*
*& Report ZSD_F_CENTRIFUGING_S_FIELD
*&---------------------------------------------------------------------*
*&  *$* Program Name : ZSD_F_CENTRIFUGING_S_FIELD
*&  *$* Title : Centrifuging Service Field
*&  *$* Created by : Sakib Ahmed
*&---------------------------------------------------------------------*
REPORT zsd_f_centrifuging_s_field.

TABLES sscrfields.

DATA:wa_header_data   TYPE zty_centrifuging_s_f_header,
     d_kunnr          TYPE vbak-kunnr,
     it_remarks       TYPE STANDARD TABLE OF zty_centrifuging_s_f_remarks WITH HEADER LINE,
     wa_remarks       TYPE zty_centrifuging_s_f_remarks,
     it_travel        TYPE STANDARD TABLE OF zty_centrifuging_s_f_travel WITH HEADER LINE,
     wa_travel        TYPE zty_centrifuging_s_f_travel,
     wa_saved_header  TYPE  zcen_s_f_header,
     it_saved_remarks TYPE STANDARD TABLE OF zcen_s_f_remarks,
     wa_saved_remarks TYPE zcen_s_f_remarks,
     it_saved_travel  TYPE STANDARD TABLE OF zcen_s_f_travel,
     wa_saved_travel  TYPE zcen_s_f_travel,
     lv_seconds       TYPE sytabix,
     counter          TYPE i VALUE 0,
     p_form           TYPE tdsfname VALUE 'ZSD_F_CENTRIFUGING_S_F_FORM',
     fm_name          TYPE rs38l_fnam,
     ok_code          LIKE sy-ucomm,
     l_lines          TYPE i,
     has_data         TYPE i VALUE 0,
     oil1,
     oil2,
     wt1,
     wt2,
     wt3.

*********************** for pdf **********
DATA:job_op_info TYPE ssfcrescl,
     gv_top      TYPE qtxt40.
DATA:ctrl_param  TYPE ssfctrlop,
     it_otf_data TYPE tsfotf,
     lv_certi    TYPE c,
     comp_op     TYPE ssfcompop.

DATA: time(20),
      new_time TYPE string,
      lv_time  LIKE sy-uzeit.

SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE TEXT-001.
  PARAMETERS p_vbeln TYPE vbak-vbeln OBLIGATORY.
SELECTION-SCREEN END OF BLOCK b1.

AT SELECTION-SCREEN.

  IF sscrfields-ucomm EQ space.
    sscrfields-ucomm = 'ONLI'.
  ENDIF.

  CLEAR: wa_header_data, it_remarks[], wa_remarks, it_travel[].

  "customer name,address
  SELECT SINGLE b~name1 b~stras b~ort01 b~pstlz FROM vbak AS a
        INNER JOIN kna1 AS b ON b~kunnr EQ a~kunnr
        INTO (wa_header_data-cust_name, wa_header_data-street,wa_header_data-city,wa_header_data-postal_code)
  WHERE a~vbeln EQ p_vbeln.

  "work order no
  SELECT SINGLE bstnk kunnr FROM vbak INTO (wa_header_data-work_order_no,d_kunnr) WHERE vbeln EQ p_vbeln.

  "contact person, designation
  SELECT SINGLE name_org4 title_let FROM but000 INTO (wa_header_data-contact_person,wa_header_data-desig_dept) WHERE partner EQ d_kunnr.

  "mobile,email
  SELECT SINGLE a~telf1 b~smtp_addr FROM kna1 AS a
        INNER JOIN adr6 AS b ON b~addrnumber EQ a~adrnr
        INTO (wa_header_data-mob_number,wa_header_data-email_id)
  WHERE a~kunnr EQ d_kunnr.

  SELECT  SINGLE * FROM zcen_s_f_header INTO wa_saved_header WHERE vbeln = p_vbeln.
  IF sy-subrc = 0. "Exists


    wa_header_data-engineer = wa_saved_header-engineer.
    wa_header_data-user_date = wa_saved_header-user_date.
    wa_header_data-equipment = wa_saved_header-equipment.
    wa_header_data-equip_rating = wa_saved_header-equip_rating.
    wa_header_data-oil_volume = wa_saved_header-oil_volume.
    wa_header_data-oil_type = wa_saved_header-oil_type.
    wa_header_data-model_no = wa_saved_header-model_no.
    wa_header_data-serial_no = wa_saved_header-serial_no.
    wa_header_data-work_type = wa_saved_header-work_type.

    IF wa_header_data-oil_type EQ 1.
      oil1 = 'X'.
    ELSE.
      oil2 = 'X'.
    ENDIF.

    IF wa_header_data-work_type = 0.
      wt1 = ''.
      wt2 = ''.
      wt3 = ''.
    ELSEIF  wa_header_data-work_type = 1.
      wt1 = ''.
      wt2 = ''.
      wt3 = 'X'.
    ELSEIF wa_header_data-work_type = 2 .
      wt1 = ''.
      wt2 = 'X'.
      wt3 = ''.
    ELSEIF  wa_header_data-work_type = 3.
      wt1 = ''.
      wt2 = 'X'.
      wt3 = 'X'.
    ELSEIF wa_header_data-work_type = 4.
      wt1 = 'X'.
      wt2 = ''.
      wt3 = ''.
    ELSEIF wa_header_data-work_type = 5.
      wt1 = 'X'.
      wt2 = ''.
      wt3 = 'X'.
    ELSEIF wa_header_data-work_type = 6.
      wt1 = ''.
      wt2 = 'X'.
      wt3 = 'X'.
    ELSEIF wa_header_data-work_type = 7.
      wt1 = 'X'.
      wt2 = 'X'.
      wt3 = 'X'.
    ENDIF.



    SELECT * FROM zcen_s_f_remarks INTO TABLE it_saved_remarks WHERE vbeln = p_vbeln.
    IF sy-subrc = 0. "remarks Exists
      LOOP AT it_saved_remarks INTO wa_saved_remarks.
        wa_remarks-remarks_date = wa_saved_remarks-remarks_date.
        wa_remarks-remarks = wa_saved_remarks-remarks.
        wa_remarks-remarks2 = wa_saved_remarks-remarks2.
        APPEND wa_remarks TO it_remarks.
      ENDLOOP.
    ENDIF.

    SELECT * FROM zcen_s_f_travel INTO TABLE it_saved_travel WHERE vbeln = p_vbeln.
    IF sy-subrc = 0. "travel Exists
      LOOP AT it_saved_travel INTO wa_saved_travel.

        wa_travel-travel_date = wa_saved_travel-travel_date.
        wa_travel-travel_time = wa_saved_travel-travel_time.
        wa_travel-travel_start = wa_saved_travel-travel_start.
        wa_travel-travel_end = wa_saved_travel-travel_end.
        wa_travel-start_str = wa_saved_travel-start_str.
        wa_travel-end_str = wa_saved_travel-end_str.
        APPEND wa_travel TO it_travel.
      ENDLOOP.
    ENDIF.



  ELSE.
    has_data = 1.  "Doesn't not Exist
  ENDIF.


  CALL SCREEN 100.

*&---------------------------------------------------------------------*
*& Module STATUS_0100 OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
MODULE status_0100 OUTPUT.
  SET PF-STATUS 'PF_CENTRIFUGING_S_F'.
  SET TITLEBAR 'TITLE_CENTRIFUGING'.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0100 INPUT.
  IF sy-ucomm = 'BACK' OR sy-ucomm = 'EXIT' OR sy-ucomm = 'CANCEL'.
    LEAVE TO SCREEN 0.
  ELSEIF sy-ucomm = 'PCSF'.

    DELETE it_remarks WHERE remarks_date EQ '00000000'.
    DELETE it_travel WHERE travel_date EQ '00000000'.


    IF oil1 EQ 'X'.
      wa_header_data-oil_type = 1.
    ELSE.
      wa_header_data-oil_type = 2.
    ENDIF.

    IF wt1 EQ '' AND wt2 EQ '' AND wt3 EQ ''.
      wa_header_data-work_type = 0.
    ELSEIF  wt1 EQ '' AND wt2 EQ '' AND wt3 EQ 'X'.
      wa_header_data-work_type = 1.
    ELSEIF  wt1 EQ '' AND wt2 EQ 'X' AND wt3 EQ ''.
      wa_header_data-work_type = 2.
    ELSEIF  wt1 EQ '' AND wt2 EQ 'X' AND wt3 EQ 'X'.
      wa_header_data-work_type = 3.
    ELSEIF  wt1 EQ 'X' AND wt2 EQ '' AND wt3 EQ ''.
      wa_header_data-work_type = 4.
    ELSEIF  wt1 EQ 'X' AND wt2 EQ '' AND wt3 EQ 'X'.
      wa_header_data-work_type = 5.
    ELSEIF  wt1 EQ 'X' AND wt2 EQ 'X' AND wt3 EQ ''.
      wa_header_data-work_type = 6.
    ELSEIF  wt1 EQ 'X' AND wt2 EQ 'X' AND wt3 EQ 'X'.
      wa_header_data-work_type = 7.
    ENDIF.


    CLEAR: wa_saved_header , it_saved_remarks[], wa_saved_remarks, it_saved_travel[],wa_saved_travel.

    wa_saved_header-vbeln = p_vbeln.
    wa_saved_header-user_name = sy-uname.
    wa_saved_header-entry_date = sy-datum.
    wa_saved_header-entry_time = sy-uzeit.
    wa_saved_header-engineer = wa_header_data-engineer .
    wa_saved_header-user_date = wa_header_data-user_date.
    wa_saved_header-equipment = wa_header_data-equipment.
    wa_saved_header-equip_rating = wa_header_data-equip_rating.
    wa_saved_header-oil_volume = wa_header_data-oil_volume.
    wa_saved_header-oil_type = wa_header_data-oil_type.
    wa_saved_header-model_no = wa_header_data-model_no.
    wa_saved_header-serial_no = wa_header_data-serial_no.
    wa_saved_header-work_type = wa_header_data-work_type.

    IF has_data EQ 1.
      INSERT INTO zcen_s_f_header VALUES wa_saved_header.   "INSERT DATA


    ELSE.
      MODIFY zcen_s_f_header FROM wa_saved_header.       "UPDATE DATA

    ENDIF.


    DELETE FROM zcen_s_f_remarks WHERE vbeln = p_vbeln.
    DELETE FROM zcen_s_f_travel WHERE vbeln = p_vbeln.

    SORT it_remarks BY remarks_date.
    LOOP AT it_remarks INTO wa_remarks.
      CLEAR: wa_saved_remarks.
      counter = counter + 1.
      wa_saved_remarks-vbeln = p_vbeln.
      wa_saved_remarks-sl_no = counter.
      wa_saved_remarks-remarks_date = wa_remarks-remarks_date.
      wa_saved_remarks-remarks = wa_remarks-remarks.
      wa_saved_remarks-remarks2 = wa_remarks-remarks2.
      INSERT INTO zcen_s_f_remarks VALUES wa_saved_remarks.


    ENDLOOP.

    SORT it_travel BY travel_date.
    LOOP AT it_travel INTO wa_travel.
      CLEAR: wa_saved_travel.
      wa_saved_travel-vbeln = p_vbeln.
      CALL FUNCTION 'SWI_DURATION_DETERMINE'
        EXPORTING
          start_date = wa_travel-travel_date
          end_date   = wa_travel-travel_date
          start_time = wa_travel-travel_start
          end_time   = wa_travel-travel_end
        IMPORTING
          duration   = lv_seconds.
      wa_travel-travel_time = lv_seconds / 3600.
      wa_saved_travel-travel_date = wa_travel-travel_date.
      wa_saved_travel-travel_time = wa_travel-travel_time.
      wa_saved_travel-travel_start = wa_travel-travel_start.
      wa_saved_travel-travel_end = wa_travel-travel_end.

      lv_time = wa_travel-travel_start.
      CLEAR: time.
      IF lv_time+0(2) < '12'.
        new_time = lv_time.
        CONCATENATE new_time(2) ':' new_time+2(2) ':' new_time+4(2) INTO time.
        CONCATENATE time 'AM' INTO time SEPARATED BY ' '.
      ELSE.
        lv_time+0(2) = lv_time+0(2) - 12.
        new_time = lv_time.
        CONCATENATE new_time(2) ':' new_time+2(2) ':' new_time+4(2) INTO time.
        CONCATENATE time 'PM' INTO time SEPARATED BY ' '.
      ENDIF.
      wa_travel-start_str = time.
      wa_saved_travel-start_str = wa_travel-start_str.

      lv_time = wa_travel-travel_end.
      CLEAR: time.
      IF lv_time+0(2) < '12'.
        new_time = lv_time.
        CONCATENATE new_time(2) ':' new_time+2(2) ':' new_time+4(2) INTO time.
        CONCATENATE time 'AM' INTO time SEPARATED BY ' '.
      ELSE.
        lv_time+0(2) = lv_time+0(2) - 12.
        new_time = lv_time.
        CONCATENATE new_time(2) ':' new_time+2(2) ':' new_time+4(2) INTO time.
        CONCATENATE time 'PM' INTO time SEPARATED BY ' '.
      ENDIF.
      wa_travel-end_str = time.
      wa_saved_travel-end_str = wa_travel-end_str.

      MODIFY it_travel FROM wa_travel.
      INSERT INTO zcen_s_f_travel VALUES wa_saved_travel.

    ENDLOOP.

    CALL FUNCTION 'SSF_FUNCTION_MODULE_NAME'
      EXPORTING
        formname           = p_form
      IMPORTING
        fm_name            = fm_name
      EXCEPTIONS
        no_form            = 1
        no_function_module = 2
        OTHERS             = 3.

    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      EXIT.
    ENDIF.

*********for pdf *****
    ctrl_param-no_dialog = 'X'.
    ctrl_param-preview = space.
    comp_op-tdimmed = 'X'.
    comp_op-tddest = 'LP01'.
    comp_op-tdnoprint = 'X'.
    ctrl_param-getotf = 'X'.
*****************************

    CALL FUNCTION fm_name "'/1BCDWB/SF00000010'
      EXPORTING
        control_parameters = ctrl_param
        output_options     = comp_op
        user_settings      = ' '
        wa_header          = wa_header_data
      IMPORTING
        job_output_info    = job_op_info
      TABLES
        it_remarks         = it_remarks
        it_travel          = it_travel
      EXCEPTIONS
        formatting_error   = 1
        internal_error     = 2
        send_error         = 3
        user_canceled      = 4
        OTHERS             = 5.

    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ELSE.
      APPEND LINES OF job_op_info-otfdata TO it_otf_data.
      REFRESH job_op_info-otfdata.
    ENDIF.


    IF it_otf_data[] IS INITIAL.
      MESSAGE s398(00) WITH 'No Data to be Displayed'.

    ELSE.
      CALL FUNCTION 'SSFCOMP_PDF_PREVIEW'
        EXPORTING
          i_otf                    = it_otf_data
        EXCEPTIONS
          convert_otf_to_pdf_error = 1
          cntl_error               = 2
          OTHERS                   = 3.
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
        WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.
    ENDIF.
    REFRESH it_otf_data[].
    CLEAR it_otf_data.

  ENDIF.
ENDMODULE.                                          "fcode_tc_mark_lines

*&SPWIZARD: DECLARATION OF TABLECONTROL 'REMARKS_CONTROL' ITSELF
CONTROLS: remarks_control TYPE TABLEVIEW USING SCREEN 0100.

*&SPWIZARD: LINES OF TABLECONTROL 'REMARKS_CONTROL'
DATA:     g_remarks_control_lines  LIKE sy-loopc.

*&SPWIZARD: OUTPUT MODULE FOR TC 'REMARKS_CONTROL'. DO NOT CHANGE THIS L
*&SPWIZARD: UPDATE LINES FOR EQUIVALENT SCROLLBAR
MODULE remarks_control_change_tc_attr OUTPUT.
  DESCRIBE TABLE it_remarks LINES remarks_control-lines.
*  IF it_remarks[] IS INITIAL.
*    CLEAR: wa_remarks.
*    APPEND wa_remarks TO it_remarks.
*  ENDIF.

ENDMODULE.

*&SPWIZARD: OUTPUT MODULE FOR TC 'REMARKS_CONTROL'. DO NOT CHANGE THIS L
*&SPWIZARD: GET LINES OF TABLECONTROL
MODULE remarks_control_get_lines OUTPUT.
  g_remarks_control_lines = sy-loopc.
*  MOVE-CORRESPONDING wa_remarks TO it_remarks.
ENDMODULE.

*&SPWIZARD: INPUT MODULE FOR TC 'REMARKS_CONTROL'. DO NOT CHANGE THIS LI
*&SPWIZARD: MODIFY TABLE
MODULE remarks_control_modify INPUT.
  MODIFY it_remarks
    FROM wa_remarks
    INDEX remarks_control-current_line.
*  READ TABLE it_remarks INDEX remarks_control-current_line.
*  IF sy-subrc <> 0.
*    APPEND wa_remarks TO it_remarks.
*  ELSE.
*    MODIFY it_remarks INDEX remarks_control-current_line.
*  ENDIF.
ENDMODULE.

*&SPWIZARD: INPUT MODUL FOR TC 'REMARKS_CONTROL'. DO NOT CHANGE THIS LIN
*&SPWIZARD: MARK TABLE
MODULE remarks_control_mark INPUT.
  DATA: g_REMARKS_CONTROL_wa2 LIKE LINE OF it_remarks.
  IF remarks_control-line_sel_mode = 1
  AND wa_remarks-remarks_mark = 'X'.
    LOOP AT it_remarks INTO g_REMARKS_CONTROL_wa2
      WHERE remarks_mark = 'X'.
      g_REMARKS_CONTROL_wa2-remarks_mark = ''.
      MODIFY it_remarks
        FROM g_REMARKS_CONTROL_wa2
        TRANSPORTING remarks_mark.
    ENDLOOP.
  ENDIF.
  MODIFY it_remarks
    FROM wa_remarks
    INDEX remarks_control-current_line
    TRANSPORTING remarks_mark.
ENDMODULE.

*&SPWIZARD: INPUT MODULE FOR TC 'REMARKS_CONTROL'. DO NOT CHANGE THIS LI
*&SPWIZARD: PROCESS USER COMMAND
MODULE remarks_control_user_command INPUT.
  ok_code = sy-ucomm.
  PERFORM user_ok_tc USING    'REMARKS_CONTROL'
                              'IT_REMARKS'
                              'REMARKS_MARK'
                     CHANGING ok_code.
  sy-ucomm = ok_code.

ENDMODULE.

*----------------------------------------------------------------------*
*   INCLUDE TABLECONTROL_FORMS                                         *
*----------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  USER_OK_TC                                               *
*&---------------------------------------------------------------------*
FORM user_ok_tc USING    p_tc_name TYPE dynfnam
                         p_table_name
                         p_mark_name
                CHANGING p_ok      LIKE sy-ucomm.

*&SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
  DATA: l_ok     TYPE sy-ucomm,
        l_offset TYPE i.
*&SPWIZARD: END OF LOCAL DATA------------------------------------------*

*&SPWIZARD: Table control specific operations                          *
*&SPWIZARD: evaluate TC name and operations                            *
  SEARCH p_ok FOR p_tc_name.
  IF sy-subrc <> 0.
    EXIT.
  ENDIF.
  l_offset = strlen( p_tc_name ) + 1.
  l_ok = p_ok+l_offset.

*&SPWIZARD: execute general and TC specific operations                 *
  CASE l_ok.
    WHEN 'INSR'.                      "insert row
      PERFORM fcode_insert_row USING    p_tc_name
                                        p_table_name.
      CLEAR p_ok.

    WHEN 'DELE'.                      "delete row
      PERFORM fcode_delete_row USING    p_tc_name
                                        p_table_name
                                        p_mark_name.
      CLEAR p_ok.

    WHEN 'P--' OR                     "top of list
         'P-'  OR                     "previous page
         'P+'  OR                     "next page
         'P++'.                       "bottom of list
      PERFORM compute_scrolling_in_tc USING p_tc_name
                                            l_ok.
      CLEAR p_ok.
*     WHEN 'L--'.                       "total left
*       PERFORM FCODE_TOTAL_LEFT USING P_TC_NAME.
*
*     WHEN 'L-'.                        "column left
*       PERFORM FCODE_COLUMN_LEFT USING P_TC_NAME.
*
*     WHEN 'R+'.                        "column right
*       PERFORM FCODE_COLUMN_RIGHT USING P_TC_NAME.
*
*     WHEN 'R++'.                       "total right
*       PERFORM FCODE_TOTAL_RIGHT USING P_TC_NAME.
*
    WHEN 'MARK'.                      "mark all filled lines
      PERFORM fcode_tc_mark_lines USING p_tc_name
                                        p_table_name
                                        p_mark_name   .
      CLEAR p_ok.

    WHEN 'DMRK'.                      "demark all filled lines
      PERFORM fcode_tc_demark_lines USING p_tc_name
                                          p_table_name
                                          p_mark_name .
      CLEAR p_ok.

*     WHEN 'SASCEND'   OR
*          'SDESCEND'.                  "sort column
*       PERFORM FCODE_SORT_TC USING P_TC_NAME
*                                   l_ok.

  ENDCASE.

ENDFORM.                              " USER_OK_TC

*&---------------------------------------------------------------------*
*&      Form  FCODE_INSERT_ROW                                         *
*&---------------------------------------------------------------------*
FORM fcode_insert_row
              USING    p_tc_name           TYPE dynfnam
                       p_table_name             .

*&SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
  DATA l_lines_name       LIKE feld-name.
  DATA l_selline          LIKE sy-stepl.
  DATA l_lastline         TYPE i.
  DATA l_line             TYPE i.
  DATA l_table_name       LIKE feld-name.
  FIELD-SYMBOLS <tc>                 TYPE cxtab_control.
  FIELD-SYMBOLS <table>              TYPE STANDARD TABLE.
  FIELD-SYMBOLS <lines>              TYPE i.
*&SPWIZARD: END OF LOCAL DATA------------------------------------------*

  ASSIGN (p_tc_name) TO <tc>.

*&SPWIZARD: get the table, which belongs to the tc                     *
  CONCATENATE p_table_name '[]' INTO l_table_name. "table body
  ASSIGN (l_table_name) TO <table>.                "not headerline

*&SPWIZARD: get looplines of TableControl                              *
  CONCATENATE 'G_' p_tc_name '_LINES' INTO l_lines_name.
  ASSIGN (l_lines_name) TO <lines>.

*&SPWIZARD: get current line                                           *
  GET CURSOR LINE l_selline.
  IF sy-subrc <> 0.                   " append line to table
    l_selline = <tc>-lines + 1.
*&SPWIZARD: set top line                                               *
    IF l_selline > <lines>.
      <tc>-top_line = l_selline - <lines> + 1 .
    ELSE.
      <tc>-top_line = 1.
    ENDIF.
  ELSE.                               " insert line into table
    l_selline = <tc>-top_line + l_selline - 1.
    l_lastline = <tc>-top_line + <lines> - 1.
  ENDIF.
*&SPWIZARD: set new cursor line                                        *
  l_line = l_selline - <tc>-top_line + 1.

*&SPWIZARD: insert initial line                                        *
  INSERT INITIAL LINE INTO <table> INDEX l_selline.
  <tc>-lines = <tc>-lines + 1.
*&SPWIZARD: set cursor                                                 *
  SET CURSOR LINE l_line.

ENDFORM.                              " FCODE_INSERT_ROW

*&---------------------------------------------------------------------*
*&      Form  FCODE_DELETE_ROW                                         *
*&---------------------------------------------------------------------*
FORM fcode_delete_row
              USING    p_tc_name           TYPE dynfnam
                       p_table_name
                       p_mark_name   .

*&SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
  DATA l_table_name       LIKE feld-name.

  FIELD-SYMBOLS <tc>         TYPE cxtab_control.
  FIELD-SYMBOLS <table>      TYPE STANDARD TABLE.
  FIELD-SYMBOLS <wa>.
  FIELD-SYMBOLS <mark_field>.
*&SPWIZARD: END OF LOCAL DATA------------------------------------------*

  ASSIGN (p_tc_name) TO <tc>.

*&SPWIZARD: get the table, which belongs to the tc                     *
  CONCATENATE p_table_name '[]' INTO l_table_name. "table body
  ASSIGN (l_table_name) TO <table>.                "not headerline

*&SPWIZARD: delete marked lines                                        *
  DESCRIBE TABLE <table> LINES <tc>-lines.

  LOOP AT <table> ASSIGNING <wa>.

*&SPWIZARD: access to the component 'FLAG' of the table header         *
    ASSIGN COMPONENT p_mark_name OF STRUCTURE <wa> TO <mark_field>.

    IF <mark_field> = 'X'.
      DELETE <table> INDEX syst-tabix.
      IF sy-subrc = 0.
        <tc>-lines = <tc>-lines - 1.
      ENDIF.
    ENDIF.
  ENDLOOP.

ENDFORM.                              " FCODE_DELETE_ROW

*&---------------------------------------------------------------------*
*&      Form  COMPUTE_SCROLLING_IN_TC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_TC_NAME  name of tablecontrol
*      -->P_OK       ok code
*----------------------------------------------------------------------*
FORM compute_scrolling_in_tc USING    p_tc_name
                                      p_ok.
*&SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
  DATA l_tc_new_top_line     TYPE i.
  DATA l_tc_name             LIKE feld-name.
  DATA l_tc_lines_name       LIKE feld-name.
  DATA l_tc_field_name       LIKE feld-name.

  FIELD-SYMBOLS <tc>         TYPE cxtab_control.
  FIELD-SYMBOLS <lines>      TYPE i.
*&SPWIZARD: END OF LOCAL DATA------------------------------------------*

  ASSIGN (p_tc_name) TO <tc>.
*&SPWIZARD: get looplines of TableControl                              *
  CONCATENATE 'G_' p_tc_name '_LINES' INTO l_tc_lines_name.
  ASSIGN (l_tc_lines_name) TO <lines>.


*&SPWIZARD: is no line filled?                                         *
  IF <tc>-lines = 0.
*&SPWIZARD: yes, ...                                                   *
    l_tc_new_top_line = 1.
  ELSE.
*&SPWIZARD: no, ...                                                    *
    CALL FUNCTION 'SCROLLING_IN_TABLE'
      EXPORTING
        entry_act      = <tc>-top_line
        entry_from     = 1
        entry_to       = <tc>-lines
        last_page_full = 'X'
        loops          = <lines>
        ok_code        = p_ok
        overlapping    = 'X'
      IMPORTING
        entry_new      = l_tc_new_top_line
      EXCEPTIONS
*       NO_ENTRY_OR_PAGE_ACT  = 01
*       NO_ENTRY_TO    = 02
*       NO_OK_CODE_OR_PAGE_GO = 03
        OTHERS         = 0.
  ENDIF.

*&SPWIZARD: get actual tc and column                                   *
  GET CURSOR FIELD l_tc_field_name
             AREA  l_tc_name.

  IF syst-subrc = 0.
    IF l_tc_name = p_tc_name.
*&SPWIZARD: et actual column                                           *
      SET CURSOR FIELD l_tc_field_name LINE 1.
    ENDIF.
  ENDIF.

*&SPWIZARD: set the new top line                                       *
  <tc>-top_line = l_tc_new_top_line.


ENDFORM.                              " COMPUTE_SCROLLING_IN_TC

*&---------------------------------------------------------------------*
*&      Form  FCODE_TC_MARK_LINES
*&---------------------------------------------------------------------*
*       marks all TableControl lines
*----------------------------------------------------------------------*
*      -->P_TC_NAME  name of tablecontrol
*----------------------------------------------------------------------*
FORM fcode_tc_mark_lines USING p_tc_name
                               p_table_name
                               p_mark_name.
*&SPWIZARD: EGIN OF LOCAL DATA-----------------------------------------*
  DATA l_table_name       LIKE feld-name.

  FIELD-SYMBOLS <tc>         TYPE cxtab_control.
  FIELD-SYMBOLS <table>      TYPE STANDARD TABLE.
  FIELD-SYMBOLS <wa>.
  FIELD-SYMBOLS <mark_field>.
*&SPWIZARD: END OF LOCAL DATA------------------------------------------*

  ASSIGN (p_tc_name) TO <tc>.

*&SPWIZARD: get the table, which belongs to the tc                     *
  CONCATENATE p_table_name '[]' INTO l_table_name. "table body
  ASSIGN (l_table_name) TO <table>.                "not headerline

*&SPWIZARD: mark all filled lines                                      *
  LOOP AT <table> ASSIGNING <wa>.

*&SPWIZARD: access to the component 'FLAG' of the table header         *
    ASSIGN COMPONENT p_mark_name OF STRUCTURE <wa> TO <mark_field>.

    <mark_field> = 'X'.
  ENDLOOP.
ENDFORM.                                          "fcode_tc_mark_lines

*&---------------------------------------------------------------------*
*&      Form  FCODE_TC_DEMARK_LINES
*&---------------------------------------------------------------------*
*       demarks all TableControl lines
*----------------------------------------------------------------------*
*      -->P_TC_NAME  name of tablecontrol
*----------------------------------------------------------------------*
FORM fcode_tc_demark_lines USING p_tc_name
                                 p_table_name
                                 p_mark_name .
*&SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
  DATA l_table_name       LIKE feld-name.

  FIELD-SYMBOLS <tc>         TYPE cxtab_control.
  FIELD-SYMBOLS <table>      TYPE STANDARD TABLE.
  FIELD-SYMBOLS <wa>.
  FIELD-SYMBOLS <mark_field>.
*&SPWIZARD: END OF LOCAL DATA------------------------------------------*

  ASSIGN (p_tc_name) TO <tc>.

*&SPWIZARD: get the table, which belongs to the tc                     *
  CONCATENATE p_table_name '[]' INTO l_table_name. "table body
  ASSIGN (l_table_name) TO <table>.                "not headerline

*&SPWIZARD: demark all filled lines                                    *
  LOOP AT <table> ASSIGNING <wa>.

*&SPWIZARD: access to the component 'FLAG' of the table header         *
    ASSIGN COMPONENT p_mark_name OF STRUCTURE <wa> TO <mark_field>.

    <mark_field> = space.
  ENDLOOP.
ENDFORM.                                          "fcode_tc_mark_lines
*&---------------------------------------------------------------------*
*&      Module  UPDATE  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE update INPUT.
  MODIFY it_remarks FROM wa_remarks INDEX remarks_control-current_line.
  IF sy-subrc <> 0.
    APPEND wa_remarks TO it_remarks.
  ENDIF.
*  READ TABLE it_remarks INDEX remarks_control-current_line.
*  IF sy-subrc <> 0.
*    APPEND wa_remarks TO it_remarks.
*  ELSE.
*    MODIFY it_remarks INDEX remarks_control-current_line.
*  ENDIF.
ENDMODULE.

*&SPWIZARD: DECLARATION OF TABLECONTROL 'TRAVEL_CONTROL' ITSELF
CONTROLS: travel_control TYPE TABLEVIEW USING SCREEN 0100.

*&SPWIZARD: LINES OF TABLECONTROL 'TRAVEL_CONTROL'
DATA:     g_travel_control_lines  LIKE sy-loopc.
*&SPWIZARD: OUTPUT MODULE FOR TC 'TRAVEL_CONTROL'. DO NOT CHANGE THIS LI
*&SPWIZARD: UPDATE LINES FOR EQUIVALENT SCROLLBAR
MODULE travel_control_change_tc_attr OUTPUT.
  DESCRIBE TABLE it_travel LINES travel_control-lines.
*  IF it_travel[] IS INITIAL.
*    CLEAR: wa_travel.
*    APPEND wa_travel TO it_travel.
*  ENDIF.


ENDMODULE.

*&SPWIZARD: OUTPUT MODULE FOR TC 'TRAVEL_CONTROL'. DO NOT CHANGE THIS LI
*&SPWIZARD: GET LINES OF TABLECONTROL
MODULE travel_control_get_lines OUTPUT.
  g_travel_control_lines = sy-loopc.
ENDMODULE.

*&SPWIZARD: INPUT MODULE FOR TC 'TRAVEL_CONTROL'. DO NOT CHANGE THIS LIN
*&SPWIZARD: MODIFY TABLE
MODULE travel_control_modify INPUT.
  MODIFY it_travel
    FROM wa_travel
    INDEX travel_control-current_line.
*  READ TABLE it_travel INDEX travel_control-current_line.
*  IF sy-subrc <> 0.
*    APPEND wa_travel TO it_travel.
*  ELSE.
*    MODIFY it_remarks INDEX travel_control-current_line.
*  ENDIF.
ENDMODULE.

*&SPWIZARD: INPUT MODUL FOR TC 'TRAVEL_CONTROL'. DO NOT CHANGE THIS LINE
*&SPWIZARD: MARK TABLE
MODULE travel_control_mark INPUT.
  DATA: g_TRAVEL_CONTROL_wa2 LIKE LINE OF it_travel.
  IF travel_control-line_sel_mode = 1
  AND wa_travel-mark = 'X'.
    LOOP AT it_travel INTO g_TRAVEL_CONTROL_wa2
      WHERE mark = 'X'.
      g_TRAVEL_CONTROL_wa2-mark = ''.
      MODIFY it_travel
        FROM g_TRAVEL_CONTROL_wa2
        TRANSPORTING mark.
    ENDLOOP.
  ENDIF.
  MODIFY it_travel
    FROM wa_travel
    INDEX travel_control-current_line
    TRANSPORTING mark.
ENDMODULE.

*&SPWIZARD: INPUT MODULE FOR TC 'TRAVEL_CONTROL'. DO NOT CHANGE THIS LIN
*&SPWIZARD: PROCESS USER COMMAND
MODULE travel_control_user_command INPUT.
  ok_code = sy-ucomm.
  PERFORM user_ok_tc USING    'TRAVEL_CONTROL'
                              'IT_TRAVEL'
                              'MARK'
                     CHANGING ok_code.
  sy-ucomm = ok_code.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  UPDATE_TRAVEL  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE update_travel INPUT.
  MODIFY it_travel FROM wa_travel INDEX travel_control-current_line.
  IF sy-subrc <> 0.
    APPEND wa_travel TO it_travel.
  ENDIF.
*  READ TABLE it_travel INDEX travel_control-current_line.
*  IF sy-subrc <> 0.
*    APPEND wa_travel TO it_travel.
*  ELSE.
*    MODIFY it_remarks INDEX travel_control-current_line.
*  ENDIF.
ENDMODULE.